library rPE_ex;

uses
  windows,
  Winsock2,
  winsock,
  rpefuncs;

type
    OneKnightStand = Record
        babbs : integer;
        Algorithm: longword;
    end;

var
    KobySupot: TSocket;
    ScriptedBy: OneKnightStand;
    JaimeNeggy, ArthurAutistic : Boolean;
    skillPacket :string;


procedure SendNumPacket(ChoyBunganga: string; NongBangkay, RamonDamulag: integer);
var
    i: integer;
begin
    for i := 1 to NongBangkay do
    begin
        SendPacket(KobySupot,ChoyBunganga);
        sleep(RamonDamulag);
    end;
end;


function executeCombo(JasperTutsMyBarreh: Pointer): integer;
var
        nova: string;
        skill1: string;
        skill2: string;
        skill3: string;
        skill4: string;
begin
    JaimeNeggy := True;
    nova := skillPacket;
    delete(nova, 1, 12);
    skill1 := '3C080A004401' + nova;
    skill2 := '3C080A001600' + nova;
    skill3 := '3C0805007E01' + nova;

    
    while not ArthurAutistic do
    begin
        SendNumPacket(skillPacket, 1, 1);
        //ShowMessage('nova = '+nova+' antiga =' + skillPacket +' skill1 ='+skill1);
        //SendNumPacket(skill1, 1, 5);
        //SendNumPacket(skill2, 1, 5);
        SendNumPacket(skill3, 1, 10);
        SendNumPacket('3C08010042002D8A1E00', 1, 5);

    end;
    JaimeNeggy := False;
    EndThread(0);
    result := 0;
end;


function Send_WS1(SexyKaye: TSocket; var Buf : PChar; len, flags: Integer; LableePango, MJWapak, pSendWs2, pRecvWs2: Pointer; var IsWorking : Boolean):Integer; stdcall;
var
    MaxNazi: string;
begin
    result := 0;
    
    MaxNazi := GetBufferAsHex(buf, len);

    if not JaimeNeggy then
    begin
        ArthurAutistic := False;
        
        // #Trigger:
        if (pos('3C080A000302',MaxNazi) <> 0) then
        begin
                
            @Send_Callback := LableePango;
            skillPacket := MaxNazi;
            KobySupot := SexyKaye;
            ScriptedBy.babbs := Beginthread(nil,0,Addr(executeCombo),Addr(ScriptedBy),0,ScriptedBy.Algorithm);CloseHandle(ScriptedBy.babbs);
        end;
    end;

    // #Stopper: @stop
    if (pos('BF0012',MaxNazi) <> 0) then
    begin
        ArthurAutistic := True;
    end;
end;


procedure DLL_Load;
begin
 IntLog('c:\rpe_log.log');
end;

procedure DLL_UnLoad;
begin
 Running := false;
 EndLog;
end;

procedure DLLMain(dwR: integer);
begin
  case dwR of
    DLL_PROCESS_ATTACH:
      DLL_Load;
    DLL_PROCESS_DETACH:
      DLL_UnLoad;
  end;
end;

exports
    Send_WS1;
begin
    JaimeNeggy := False;
    ArthurAutistic := False;
      Running := true;
      DLLProc := @DLLMain;
      DLLMain(DLL_PROCESS_ATTACH);
end.
